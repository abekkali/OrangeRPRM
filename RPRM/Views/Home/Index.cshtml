@using Microsoft.AspNetCore.Identity
@using RPRM.Models.User;
@inject SignInManager<User> SignInManager
@inject UserManager<User> _userManager
@{
    ViewData["Title"] = "Orange - RPRM";
    if (!User.Identity.IsAuthenticated)
    {
        Context.Response.Redirect("/Identity/Account/Login");
    }
    else
    {
        var user = await _userManager.GetUserAsync(User);


        if (user == null || !user.EmailConfirmed)
        {
            ViewBag.Message = "Veuillez confirmer votre inscription depuis votre mail";
            Context.Response.Redirect("/Home/PageInformation");
            
        }
    }
}

<div class="pagetitle">
    <h1>Dashboard</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active">Dashboard</li>
        </ol>
    </nav>
</div><!-- End Page Title -->

<section class="section dashboard">
    <div class="row">
        <!-- Card -->
        <div class="col-3" id="card1">
            <div class="card info-card revenue-card">

                <div class="filter">
                    <a class="icon" href="#" data-bs-toggle="dropdown"></a>
                </div>
                <div class="card-body">
                    <h5 class="card-title">Operateurs </h5>
                    <div class="d-flex align-items-center">
                        <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                            <i class="bi bi-telephone-fill"></i>
                        </div>
                        <div class="ps-3">
                            <h6 id="operatorCount"></h6>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3" id="card2">
            <div class="card info-card sales-card">

                <div class="filter">
                    <a class="icon" href="#" data-bs-toggle="dropdown"></a>
                </div>

                <div class="card-body">
                    <h5 class="card-title">Pays</h5>

                    <div class="d-flex align-items-center">
                        <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                            <i class="bi bi-globe-europe-africa"></i>
                        </div>
                        <div class="ps-3">
                            <h6 id="countryCount"></h6>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3" id="card3">
            <div class="card info-card sales-card">
                <div class="filter">
                    <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                    <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                        <li class="d-flex justify-content-between" style="margin-left: 10px;margin-right: 10px;">
                            <div>
                                <div class="dropdown-header">Service</div>
                                <div id="serviceFilters"></div>
                            </div>
                            <div>
                                <div class="dropdown-header">Direction</div>
                                <div id="directionFilters"></div>
                            </div>
                        </li>
                        <li>
                            <button id="applyFilters" class="btn btn-primary" style="margin: 10px;">Apply</button>
                        </li>
                    </ul>
                </div>

                <div class="card-body">
                    <h5 class="card-title" style="padding: 5px;">
                        Services Ouverts
                    </h5>
                    <div class="d-flex align-items-center">
                        <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                            <i class="bi bi-telephone-fill"></i>
                        </div>
                        <div class="ps-3">
                            <h7 id="GrpService1"></h7><br />
                            <h7 id="GrpService2"></h7><br />
                            <h7 id="GrpService3"></h7><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3" id="card4">
            <div class="card info-card revenue-card">

                <div class="filter">
                    <a class="icon" href="#" id="dotIcon4"><i class="bi bi-three-dots"></i></a>
                </div>
                <div class="card-body">
                    <h5 class="card-title">Incidents</h5>
                    <div class="d-flex align-items-center">
                        <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                            <i class="bi bi-cone-striped" style="color: red;"></i>
                        </div>
                        <div class="ps-3">
                            <h6 id="incidentCount"></h6>
                        </div>
                    </div>
                </div>

            </div>
        </div>
               <!-- End Card -->
    </div>
    <div class="row">
            
        <!-- search by pays, op , plmn -->
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Recherche par :</h5>

                    <!-- Default Tabs -->
                    <ul class="nav nav-tabs nav-tabs-bordered d-flex" id="borderedTabJustified" role="tablist">
                        <li class="nav-item flex-fill" role="presentation">
                            <button class="nav-link w-100" id="pays-tab" data-bs-toggle="tab" data-bs-target="#bordered-justified-pays" type="button" role="tab" aria-controls="home" aria-selected="true">Pays</button>
                        </li>
                        <li class="nav-item flex-fill" role="presentation">
                            <button class="nav-link w-100" id="profile-tab" data-bs-toggle="tab" data-bs-target="#bordered-justified-profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Groupes</button>
                        </li>
                        <li class="nav-item flex-fill" role="presentation">
                            <button class="nav-link w-100 active" id="plmn-tab" data-bs-toggle="tab" data-bs-target="#bordered-justified-plmn" type="button" role="tab" aria-controls="contact" aria-selected="false">PLMN</button>
                        </li>
                    </ul>

                    <div class="tab-content pt-4" id="borderedTabJustifiedContent">
                        <div class="tab-pane fade mt-4" id="bordered-justified-pays" role="tabpanel" aria-labelledby="pays-tab">
                            <div class="search-bar" id="mapContainer">
                                <div class="input-group mb-3">
                                    <span class="input-group-text" id="basic-addon3">Par Pays</span>
                                    <input class="form-select" list="paysOptions" id="Search-pays" aria-describedby="basic-addon3">
                                    <button id="searchButton" class="btn btn-primary" onclick="searchCountry()">Chercher</button><button id="toggleRightSidebar" class="btn btn-primary"><i class="bi bi-grip-vertical"></i></button>
                                    <datalist id="paysOptions">
                                    </datalist>
                                </div>
                                <div id="mapAndFilterContainer" style="display: flex; width: 100%;">
                                    <div id="map" style="flex-grow: 1; height: 620px;">
                                        <div id="legend" style="position: absolute; bottom: 30px; left: 10px; background-color: rgba(255, 255, 255, 0.7); padding: 10px; display: flex; flex-wrap: wrap; z-index: 1000;"></div>
                                    </div>

                                    <div id="rightSidebar" style="height: 620px; width: 0; transition: 0.5s; overflow-x: hidden;">
                                        <li class="d-flex flex-column" style="margin-left: 10px;margin-right: 10px;">
                                            <div>
                                                <div class="dropdown-header text-center" style="font-size: larger;">Service</div>
                                                <div id="serviceFiltersMap"></div>
                                            </div>
                                            <div>
                                                <div class="dropdown-header text-center" style="font-size: larger;">Direction</div>
                                                <div id="directionFiltersMap"></div>
                                            </div>
                                            <div class="w-100 d-flex justify-content-center">
                                                <button id="applyFiltersMap" class="btn btn-primary" style="margin: 10px;">Apply</button>
                                            </div>
                                            
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="changeMapColor">
                                                <label class="form-check-label" for="changeMapColor">Mode couleur</label>
                                            </div>
                                        </li>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="bordered-justified-profile" role="tabpanel" aria-labelledby="profile-tab">
                            <div class="search-bar">
                                <div class="input-group mb-3">
                                    <span class="input-group-text" id="basic-addon3">Par Groupes</span>
                                    <input class="form-select" list="GroupesOptions" id="Search-groupes" name="Search-groupes"><button id="searchButtonGroupes" class="btn btn-primary">Chercher</button>
                                    <datalist id="GroupesOptions">
                                    </datalist>
                                </div>
                                    <div class="mt-4">
                                        <table id="table_groupes_plmn" class="table table-striped table-bordered">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Code PLMN</th>
                                                    <th scope="col">Nom Operateur</th>
                                                    <th scope="col">Pays</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tableBody">
                                            </tbody>
                                        </table>
                                    </div>
                            </div>
                        </div>
                        <div class="tab-pane fade active show" id="bordered-justified-plmn" role="tabpanel" aria-labelledby="plmn-tab">
                            <div class="search-bar">
                                <div class="input-group mb-3">
                                    <span class="input-group-text" id="basic-addon3">Par PLMN</span>
                                    <input class="form-select" list="plmnOptions" id="plmnSelect" name="Code_PLMN"><button id="searchBtnPlmn" class="btn btn-primary">Chercher</button>
                                    <datalist id="plmnOptions">
                                    </datalist>
                                </div>
                                <div class="row">
                                    <div class="accordion col-6" id="accordion1">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="headingOne">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                                    Partner Service Management
                                                    <a href="#" data-bs-toggle="modal" data-bs-target="#modifyOPModal" class="ms-2 align-middle text-decoration-none">
                                                        <i class="bi bi-pencil"></i>
                                                    </a>
                                                </button>

                                            </h2>
                                            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample" style="">
                                                <div class="accordion-body">
                                                    <table class="table">
                                                        <tr>
                                                            <th>Nom Operateur</th>
                                                            <td id="nomOperateur"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Type Operateur</th>
                                                            <td id="typeOperateur"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Type Accord</th>
                                                            <td id="typeAccord"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Pays</th>
                                                            <td id="pays"></td>
                                                        </tr>
                                                    </table>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="headingTwo">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                                    Groupe Management
                                                </button>
                                            </h2>
                                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordion1">
                                                <div class="accordion-body">
                                                    <table class="table">
                                                        <tr>
                                                            <th>Nom Groupe</th>
                                                            <td id="nomGroupe"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Nombres Operateurs</th>
                                                            <td id="NBOperateur"></td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="headingThree">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                                    Document Operateurs
                                                </button>
                                            </h2>
                                            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    <table class="table" id="docTable">
                                                        <tr>
                                                            <th>Nom Document</th>
                                                            <th>Type</th>
                                                            <th>Date</th>
                                                            <th>Attach</th>
                                                        </tr>

                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading7">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse7" aria-expanded="false" aria-controls="collapse7">
                                                    Tarif
                                                </button>
                                            </h2>
                                            <div id="collapse7" class="accordion-collapse collapse" aria-labelledby="heading7" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    <table class="table" id="tarifTable">
                                                        <tr>
                                                            <th>Type Trafic</th>
                                                            <th>Type Tarif</th>
                                                            <th>Inc</th>
                                                            <th>Exchange Rate</th>
                                                            <th>Rate</th>
                                                        </tr>

                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion col-6" id="accordion2">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading4">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse4" aria-expanded="false" aria-controls="collapseOne">
                                                    Service Ouvert
                                                </button>
                                            </h2>
                                            <div id="collapse4" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordion2" style="">
                                                <div class="accordion-body">
                                                    <table class="table" id="serviceTable">
                                                        <tr>
                                                            <th>Destination</th>
                                                            <th>Nom Service</th>
                                                            <th>Direction</th>
                                                            <th>Date Lancement</th>
                                                        </tr>
                                                       
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading5">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse5" aria-expanded="false" aria-controls="collapse5">
                                                    Incident Management
                                                </button>
                                            </h2>
                                            <div id="collapse5" class="accordion-collapse collapse" aria-labelledby="heading5" data-bs-parent="#accordion2">
                                                <div class="accordion-body">
                                                    <table id ="incidentTable" class="table">
                                                        <tr>
                                                            <th>code ticket</th>
                                                            <th> Commentaires</th>
                                                            <th>Date Envoi</th>
                                                            <th>Date Résolution</th>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading6">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse6" aria-expanded="false" aria-controls="collapse6">
                                                    Contact Management
                                                </button>
                                            </h2>
                                            <div id="collapse6" class="accordion-collapse collapse" aria-labelledby="heading6" data-bs-parent="#accordion2">
                                                <div class="accordion-body">
                                                    <table class="table" id="contactTable">
                                                        <tr>
                                                            <th>Type</th>
                                                            <th>Nom</th>
                                                            <th>Telephone</th>
                                                            <th>Email</th>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><!-- End Default Tabs -->

                </div>
            </div>
        </div><!-- End search -->
    </div>
    <!-- Modal -->
    @await Html.PartialAsync("~/Views/Shared/Modal/OperateursModal.cshtml")

</section>
@section Scripts {
    <script src="~/js/site.js"></script>
@*    <script type='text/javascript' src='api/mapcontrol?callback=initializeMapControl' async defer></script>
*@    <script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=initializeMapControl&key=AtH6PxhN-DCM0pF-WUCFvt9ASrOubkue0sC4UN69IsJ_1kQ7zxX5Fmd3x0InMgPR' async defer></script>
    <script src="~/assets/vendor/map/map.js"></script>
    <script src="~/assets/vendor/map/topojson.js"></script>
    <script src="~/assets/vendor/chart/chart.js"></script>
    <script src="~/assets/vendor/chart/labelchart.js"></script>



    <script>
        var map;
        let allOperatorData = [];

        let operatorData = [];
        var infoboxCountryCodes = new Map();
        var pushpinInfoboxes = new Map();

        function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }
        function transparentize(color, opacity) {
            var alpha = Math.round(255 * opacity).toString(16);
            if (alpha.length < 2) {
                alpha = "0" + alpha;
            }
            return color + alpha;
        }

        function GetMap() {
            map = new Microsoft.Maps.Map('#map', {
                zoom: 2,
                showMapTypeSelector: false
            });

            loadData();
            var countryInput = document.getElementById("Search-pays");
            countryInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    searchCountry();
                }
            });
        }

        function loadData() {
            var apiUrl = "/api/OpByCountry";
            let selectedServiceIds = [];
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    addPushpins(data);
                    allOperatorData = data;
                    operatorData = data;

                    // Add event listener to filter button after data is loaded
                    document.getElementById('applyFiltersMap').addEventListener('click', function () {
                        document.getElementById('changeMapColor').checked = false;
                        operatorData = allOperatorData;
                        allOperatorData = JSON.parse(JSON.stringify(data));
                        operatorData = JSON.parse(JSON.stringify(data));
                        // Get selected service IDs
                        selectedServiceIds = Array.from(document.querySelectorAll('input[id^="mapNom_Service"]:checked')).map(input => parseInt(input.id.replace('mapNom_Service-', '')));
                        const selectedDirectionIds = Array.from(document.querySelectorAll('input[id^="mapDirection"]:checked')).map(input => parseInt(input.id.replace('mapDirection-', '')));

                        operatorData.forEach(country => {
                            country.operators = country.operators.filter(operator => {
                                if (selectedServiceIds.length > 0 && selectedDirectionIds.length > 0) {
                                    // Filtrer les opérateurs qui ont au moins un service dans l'une des directions sélectionnées
                                    return operator.service_direction_pairs.some(pair =>
                                        selectedServiceIds.includes(pair.service) && selectedDirectionIds.includes(pair.direction)
                                    );
                                } else if (selectedServiceIds.length > 0) {
                                    // Filtrer les opérateurs qui ont tous les services sélectionnés
                                    return selectedServiceIds.every(serviceId =>
                                        operator.service_direction_pairs.some(pair => pair.service === serviceId)
                                    );
                                } else if (selectedDirectionIds.length > 0) {
                                    // Filtrer les opérateurs qui ont au moins un service dans l'une des directions sélectionnées pour n'importe quel service
                                    return operator.service_direction_pairs.some(pair =>
                                        selectedDirectionIds.includes(pair.direction)
                                    );
                                } else {
                                    // Si aucun filtre de service ou de direction n'est sélectionné, conserver tous les opérateurs
                                    return true;
                                }
                            });
                        });

                        operatorData = operatorData.filter(country => country.operators.length > 0);
                        console.log('Operator data after filtering:', operatorData);
                        map.entities.clear();
                        addPushpins(operatorData);
                    });
                    d3.json('countries-50m.json').then(topology => {
                        countryBorders = topojson.feature(topology, topology.objects.countries);

                        document.getElementById('changeMapColor').addEventListener('change', function () {
                            map.entities.clear();
                            document.getElementById('legend').innerHTML = '';
                            if (this.checked) {
                                map.setOptions({ showLocateMeButton: false, showZoomButtons: false });
                                function getSelectedDirectionIds() {
                                    return Array.from(document.querySelectorAll('input[id^="mapDirection"]:checked')).map(input => parseInt(input.id.replace('mapDirection-', '')));
                                }
                                addCountryColors(operatorData, selectedServiceIds, getSelectedDirectionIds());
                            } else {
                                map.setOptions({ showLocateMeButton: true, showZoomButtons: true });
                                addPushpins(operatorData);
                            }
                        });
                    });
                });
        }

        function addCountryColors(countries, selectedServiceIds, selectedDirectionIds) {
            const servicesDirectionsColors = {};
            const legend = document.getElementById('legend');

            countries.forEach(country => {
                const borders = countryBorders.features.find(feature => feature.id === country.cc.padStart(3, '0'));
                if (!borders) {
                    console.error(`No borders for cc ${country.cc}`);
                    return;
                }

                const isMultiPolygon = borders.geometry.type === 'MultiPolygon';
                let polygons;
                if (isMultiPolygon) {
                    polygons = borders.geometry.coordinates.map(polygon => {
                        return polygon.map(ring => ring.map(coord => new Microsoft.Maps.Location(coord[1], coord[0])));
                    });
                } else {
                    polygons = [borders.geometry.coordinates.map(ring => ring.map(coord => new Microsoft.Maps.Location(coord[1], coord[0])))];
                }

                // Get the unique service/direction pairs for this country
                const countryServicesDirectionsPairs = [];
                country.operators.forEach(operator => {
                    operator.service_direction_pairs.forEach(serviceDirectionPair => {
                        if (selectedServiceIds.includes(serviceDirectionPair.service) &&
                            (selectedDirectionIds.length === 0 || selectedDirectionIds.includes(serviceDirectionPair.direction))) {
                            countryServicesDirectionsPairs.push(serviceDirectionPair);
                        }
                    });
                });

                countryServicesDirectionsPairs.forEach(serviceDirectionPair => {
                    const pairKey = `${serviceDirectionPair.service}_${serviceDirectionPair.direction}`;
                    if (!servicesDirectionsColors[pairKey]) {
                        servicesDirectionsColors[pairKey] = getRandomColor();
                        const legendItem = document.createElement('div');
                        legendItem.style.display = 'flex';
                        legendItem.style.flexDirection = 'row';
                        legendItem.style.alignItems = 'center';
                        legendItem.style.marginTop = '5px';

                        const colorBox = document.createElement('span');
                        colorBox.style.backgroundColor = servicesDirectionsColors[pairKey];
                        colorBox.style.display = 'inline-block';
                        colorBox.style.width = '30px';
                        colorBox.style.height = '30px';
                        colorBox.style.marginRight = '5px';
                        const legendLabel = document.createElement('label');
                        legendLabel.style.display = 'block';
                        legendItem.insertBefore(legendLabel, legendItem.firstChild);

                        legendItem.appendChild(colorBox);
                        const serviceName = document.createElement('span');

                        serviceName.textContent = `${getServiceName(serviceDirectionPair.service)} - ${getDirectionName(serviceDirectionPair.direction)}`;
                        legendItem.appendChild(serviceName);

                        legend.appendChild(legendItem);
                    }

                    const color = Microsoft.Maps.Color.fromHex(servicesDirectionsColors[pairKey]);

                    polygons.forEach(polygon => {
                        const bingPolygon = new Microsoft.Maps.Polygon(polygon, { fillColor: color, strokeColor: color });
                        map.entities.push(bingPolygon);
                    });
                });
            });
        }
        function getServiceName(serviceId) {
            const lookupData = JSON.parse(localStorage.getItem('lookupData'));
            console.log("lookupData:", lookupData); // Check what's actually in lookupData
            console.log("Service ID:", serviceId); // Check the service ID that's being searched for
            const service = lookupData.find(item => item.lookup_Type === "Nom_Service" && item.id === Number(serviceId));
            return service ? service.value : `Service inconnu ${serviceId}`;
        }


        function getDirectionName(serviceId) {
            const lookupData = JSON.parse(localStorage.getItem('lookupData'));
            const direction = lookupData.find(item => item.lookup_Type === "Direction" && item.id === serviceId);
            return direction ? direction.value : `Direction inconnue ${serviceId}`;
        }
        async function addPushpins(data) {
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                var searchManager = new Microsoft.Maps.Search.SearchManager(map);

                // Fonction pour ajouter un délai
                const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

                // Fonction pour géocoder et ajouter des pushpins avec un délai
                const geocodeAndAddPushpin = async (item) => {
                    var requestOptions = {
                        where: item.countryName,
                        c: 'en-US',
                        callback: function (answer, userData) {
                            if (answer && answer.results && answer.results.length > 0) {
                                var location = answer.results[0].location;

                                // Store the location in the cache
                                localStorage.setItem(userData.countryCode, JSON.stringify(location));

                                var pushpin = new Microsoft.Maps.Pushpin(location);
                                map.entities.push(pushpin);
                                var pushpinInfobox = new Microsoft.Maps.Infobox(pushpin.getLocation(), {
                                    title: userData.countryName,
                                    description: `<div class="infoboxContent"><table>
                                    <tbody>${userData.operators.map(operator => `
                                      <tr>
                                           <td style="white-space: nowrap;vertical-align: top;"><a href="#" onclick="event.preventDefault(); setPlmnAndSearch('${operator.code}');">${operator.code}</a></td>
                                                   <td style="vertical-align: top;"> - </td>
                                           <td>${operator.name}</td>
                                      </tr>
                                      `).join('')}</tbody>
                                     </table></div>`,
                                    visible: false,
                                    maxHeight: 350
                                });
                                infoboxCountryCodes.set(pushpinInfobox, item.countryCode);
                                pushpinInfoboxes.set(normalizeCountryName(item.countryName), pushpinInfobox);
                                pushpinInfobox.setMap(map);
                                Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
                                    Array.from(pushpinInfoboxes.values()).forEach(infobox => {
                                        infobox.setOptions({ visible: false });
                                    });
                                    pushpinInfobox.setOptions({ visible: !pushpinInfobox.getVisible() });
                                });
                            }
                        },
                        userData: item
                    };
                    var cachedLocation = localStorage.getItem(item.countryCode);
                    if (cachedLocation) {
                        var location = JSON.parse(cachedLocation);
                        var answer = {
                            results: [
                                { location: location }
                            ]
                        };
                        requestOptions.callback(answer, requestOptions.userData);
                    } else {
                        searchManager.geocode(requestOptions);
                        await delay(50);
                    }
                };
                data.reduce((promise, item) => promise.then(() => geocodeAndAddPushpin(item)), Promise.resolve());
            });
        }
        async function fetchNomPays() {
            const response = await fetch('/api/GetAllPays');
            const countryNames = await response.json();

            const dataList = document.getElementById('paysOptions');
            countryNames.forEach(name => {
                const option = document.createElement('option');
                option.value = name.nom_pays;
                option.text =  name.nom_pays_anglais;
                dataList.appendChild(option);
            });
        }

        function normalizeString(str) {
            return str.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase();
        }

        function normalizeCountryName(countryName) {
            return countryName.toLowerCase().replace(/[^a-z]/g, '');
        }
        function searchCountry() {
            var countryInput = document.getElementById("Search-pays");
            var country = countryInput.value.trim().replace(/\(.*\)/, '');
            if (country === "") {
                alert("Veuillez saisir un nom ou un code de pays valide.");
                return;
            }
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                var searchManager = new Microsoft.Maps.Search.SearchManager(map);
                var requestOptions = {
                    where: country,
                    callback: function (response) {

                        // Fermer tous les infoboxes
                        Object.values(pushpinInfoboxes).forEach(infobox => {
                            infobox.setOptions({ visible: false });
                        });

                        if (response && response.results && response.results.length > 0) {
                            var result = response.results[0];
                            var boundingBox = result.bestView;
                            map.setView({
                                bounds: boundingBox,
                                animationDuration: 2000
                            });

                            var countryName = normalizeCountryName(result.name);
                            var infobox = pushpinInfoboxes.get(countryName);
                            if (infobox) {
                                infobox.setOptions({ visible: true });
                            } else {
                                console.error(`Infobox for ${countryName} not found`);
                            }
                        } else {
                            alert("Aucun pays trouvé avec ce nom ou ce code.");
                        }
                    }
                };
                searchManager.geocode(requestOptions);
            });
        }
        var mapLoaded = false;

        document.getElementById("pays-tab").addEventListener("shown.bs.tab", function (event) {
            if (!mapLoaded) {
                GetMap();
                fetchNomPays();
                mapLoaded = true;
            }
        });
       
        function initializeMapControl() {
            Microsoft.Maps.loadModule('Microsoft.Maps.Map', function () {
                var paysTab = document.getElementById("pays-tab");
                if (paysTab.classList.contains("active")) {
                    GetMap();
                }
                paysTab.addEventListener("shown.bs.tab", function (event) {
                    if (document.getElementById("bordered-justified-pays").classList.contains("active")) {
                        GetMap();
                    }
                });
            });
        }
        function setPlmnAndSearch(operatorCode) {
            document.querySelector('#plmn-tab').click();
            const plmnSelect = document.querySelector('#plmnSelect');
            plmnSelect.value = operatorCode;
            document.querySelector('#searchBtnPlmn').click();
        }
        $(document).ready(function () {
            $.get("/api/GetDashboardData", function (data) {
                $("#countryCount").text(data.countryCount);
                $("#operatorCount").text(data.operatorCount);
                $("#incidentCount").text(data.incidentCount);
                $("#GrpService1").text(data.serviceBillateral + " BI");
                $("#GrpService2").text(data.serviceIn + " IN");
                $("#GrpService3").text(data.serviceOut + " OUT");

            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error("Erreur lors de l'appel AJAX : " + textStatus + ", " + errorThrown);
            });
            var plmnTab = document.getElementById("plmn-tab");

            if (plmnTab.classList.contains("active")) {
                loadPLMNCodes();
            }

            plmnTab.addEventListener("shown.bs.tab", function (event) {
                if (document.getElementById("bordered-justified-plmn").classList.contains("active")) {
                    loadPLMNCodes();
                }
            });
            $("#plmnSelect").on("input", function () {
                var enteredValue = $(this).val().toLowerCase().replace(/\s/g, ''); // Convertissez en minuscules et supprimez les espaces
                console.log("enteredValue", enteredValue);
                var isValidOption = false;
                $("#plmnOptions option").each(function () {
                    var optionValue = $(this).val().toLowerCase().replace(/\s/g, ''); // Convertissez en minuscules et supprimez les espaces

                    if (optionValue === enteredValue) {
                        console.log("valeur saisi", $(this).val());

                        isValidOption = true;
                        return false; 
                    }
                });
                    if (isValidOption) {
                        $("#searchBtnPlmn").click();
                    }
             });

          
            $("#plmnSelect").on("keypress", function (event) {
                if (event.which === 13) {  
                    event.preventDefault();  
                    $("#searchBtnPlmn").click(); 
                }
            });

            $("#searchBtnPlmn").on("click", function (event) {
                event.preventDefault();
                var codePlmn = $("#plmnSelect").val();

                $.ajax({
                    url: "/api/GetPlmnGeneralView",
                    method: "GET",
                    data: { codePlmn: codePlmn },
                    success: function (data) {

                        $("#nomOperateur").text(data.nom_Op);
                        $("#typeOperateur").text(data.typeOperateur);
                        $("#typeAccord").text(data.typeAccord);
                        $("#pays").text(data.nomPays);
                        $("#nomGroupe").text(data.groupe);
                        $("#NBOperateur").html(data.nbOperateurs + '<a href="#" data-bs-toggle="modal" data-bs-target="#plmnByGroupe" class="ms-2 align-middle text-decoration-none"><i class="bi bi-table"></i></a>');
                        // Service ouverts
                        $("#serviceTable tr:not(:first)").remove();
                        if (data.serviceOuverts && data.serviceOuverts.length > 0) {
                            var currentDestination = null;
                            var currentColor = 'rgba(0, 0, 0, 0.05)';
                            var destinationCount = 0;
                            var destinationCell = null;

                            data.serviceOuverts.forEach(function (s, index) {
                                if (s.destination !== currentDestination) {
                                    // Changer la couleur quand la destination change
                                    currentColor = currentColor === 'transparent' ? 'rgba(0, 0, 0, 0.05)' : 'transparent';
                                    currentDestination = s.destination;

                                    if (destinationCell !== null) {
                                        destinationCell.attr('rowspan', destinationCount);
                                    }

                                    destinationCount = 1;
                                    destinationCell = $("<td></td>").text(s.destination).css('vertical-align', 'middle');
                                } else {
                                    destinationCount++;
                                }

                                var tableRow = $("<tr></tr>").css('background-color', currentColor);
                                var nomService = $("<td></td>").text(s.nomService);
                                var direction = $("<td></td>").text(s.direction);
                                var date_d = $("<td></td>").text(s.date_d);

                                if (s.destination === currentDestination && destinationCount === 1) {
                                    tableRow.append(destinationCell, nomService, direction, date_d);
                                } else {
                                    tableRow.append(nomService, direction, date_d);
                                }

                                $("#serviceTable").append(tableRow);
                            });

                            if (destinationCell !== null) {
                                destinationCell.attr('rowspan', destinationCount);
                            }
                        }
                        // Incident
                        $("#incidentTable tr:not(:first)").remove();
                        if (data.incidents && data.incidents.length > 0) {
                       
                            data.incidents.forEach(function (i) {
                                var tableRow = $("<tr></tr>");
                                var codeCell = $("<td></td>").text(i.code_TT);
                                var commentaireCell = $("<td></td>").text(i.commentaire);
                                var date_dCell = $("<td></td>").text(i.date_d);
                                var date_fCell = $("<td></td>").text(i.date_f);
                                tableRow.append(codeCell, commentaireCell, date_dCell, date_fCell);
                                $("#incidentTable").append(tableRow);
                            });
                        }
                        // Contact information
                        $("#contactTable tr:not(:first)").remove();
                        if (data.contacts && data.contacts.length > 0) {
                            data.contacts.forEach(function (contact) {
                                var tableRow = $("<tr></tr>");
                                var typeCell = $("<td></td>").text(contact.type);
                                var nomCell = $("<td></td>").text(contact.nom);
                                var telephoneCell = $("<td></td>").text(contact.telephone);
                                var emailCell = $("<td></td>").text(contact.email);
                                tableRow.append(typeCell, nomCell, telephoneCell, emailCell);
                                $("#contactTable").append(tableRow);
                            });
                        }
                        //Document
                        $("#docTable tr:not(:first)").remove();
                        if (data.documents && data.documents.length > 0) {
                            data.documents.forEach(function (d) {
                                var tableRow = $("<tr></tr>");
                                var docCell = $("<td></td>").text(d.document);
                                var typeCell = $("<td></td>").text(d.type);
                                var dateCell = $("<td></td>").text(d.date);
                                var iconCell = $("<td></td>");
                                var button = $("<button type='button' class='btn btn-primary'></button>");
                                var icon = $("<i class='bi bi-file-earmark-pdf-fill'></i>");
                                button.append(icon);
                                iconCell.append(button);
                                tableRow.append(docCell, typeCell, dateCell, iconCell);
                                $("#docTable").append(tableRow);
                                icon.on('click', function () {
                                    var url = "/Import/GetFile?codePLMN=" + encodeURIComponent(codePlmn) + "&fileName=" + encodeURIComponent(d.document);
                                    var ext = d.document.split('.').pop().toLowerCase();

                                    $('#fileObject').remove();
                                    $('#ModalFile .modal-body').html(''); // On vide le corps de la modale pour être sûr que rien n'est laissé du précédent fichier

                                    if (ext == 'pdf' || ext == 'jpg' || ext == 'jpeg' || ext == 'png') {
                                        var newEmbed = $('<embed>')
                                            .attr('src', url)
                                            .attr('type', 'application/pdf');

                                        var newObject = $('<object>')
                                            .attr('data', url)
                                            .attr('type', 'application/pdf')
                                            .attr('width', '100%')
                                            .attr('height', '600px')
                                            .attr('id', 'fileObject')
                                            .append(newEmbed);

                                        $('#ModalFile .modal-body').append(newObject);
                                    } else {
                                        $('#ModalFile .modal-body').html('<p><a id="fileDownloadLink" href="' + url + '">Cliquez ici pour télécharger le fichier</a>.</p>');
                                    }

                                    $('#fileDownloadLink').attr('href', url);
                                    $('#ModalFile').modal('show');

                                });
                                $('#ModalFile').on('hidden.bs.modal', function (e) {
                                    $('#fileDownloadLink').attr('href', '');
                                })
                            });
                        }
                        // Tarifs
                        if (data.tarifs && data.tarifs.length > 0) {
                            $("#tarifTable tr:not(:first)").remove();

                            data.tarifs.forEach(function (tarif) {
                                var tableRow = $("<tr></tr>");
                                var typeCell = $("<td></td>").text(tarif.type_Trafic);
                                var type2Cell = $("<td></td>").text(tarif.type_Tarif);
                                var incrementCell = $("<td></td>").text(tarif.increment);
                                var exchange_rateCell = $("<td style='white - space: nowrap; '></td>").text(tarif.exchange_rate);
                                var rateCell = $("<td style='white - space: nowrap; '></td>").text(tarif.rate);

                                tableRow.append(typeCell, type2Cell, incrementCell, exchange_rateCell, rateCell);
                                $("#tarifTable").append(tableRow);
                            });
                        }
                        $("#collapseOne").collapse("show");
                        $("#collapse4").collapse("show");
                    },
                    error: function (xhr, status, error) {
                        alert("Erreur lors de la récupération des données: " + error);
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // Fonctions
            Promise.all([fetchLookupData(), fetchGroupData()])
                .then(function ([lookupData, groupData]) {
                    // Filtrer les données de recherche pour obtenir les différents types de données nécessaires.
                    const typesOp = lookupData.filter(item => item.lookup_Type === 'Type_Operateur');
                    const typesAccord = lookupData.filter(item => item.lookup_Type === 'Type_Accord');
                    const directions = lookupData.filter(item => item.lookup_Type === 'Direction');
                    const services = lookupData.filter(item => item.lookup_Type === 'Nom_Service');

                    // Remplir les options de sélection avec les données appropriées.
                    populateLookupDropdown(lookupData, 'Type_Operateur', 'mTypeOp');
                    populateLookupDropdown(lookupData, 'Type_Accord', 'mTypeAccord');
                  
                    //filtre 
                    populateFilters(directions, '#directionFilters',"");
                    populateFilters(services, '#serviceFilters', "");
                    //filtre Map
                    populateFilters(directions, '#directionFiltersMap', "map");
                    populateFilters(services, '#serviceFiltersMap', "map");
                   
                    // Remplir les options de groupe avec les données de groupe.
                    groupData.forEach(g => {
                        const option = new Option(g.nom_Groupe, g.code_Groupe);
                        $('#mGrpName').append(option);
                    });
                    groupData.forEach(groupe => {
                        const option = $('<option>');
                        option.val(groupe.nom_Groupe);
                        option.attr('data-value', groupe.code_Groupe);
                        $('#GroupesOptions').append(option);
                    });
                })
                .catch(function (error) {
                    console.error('An error occurred:', error);
                });
            $("#toggleRightSidebar").click(function () {
                var sidebarOpen = $("#rightSidebar").width() > 0;

                if (sidebarOpen) {
                    // Close the sidebar
                    $("#rightSidebar").width(0);
                    $("#map").css('flex-grow', 1);
                } else {
                    // Open the sidebar
                    $("#rightSidebar").width("20%");
                    $("#map").css('flex-grow', 1);
                    $("#map").css('width', '80%');
                }
            });
            function handleOperateurData(data) {
                $('#mcode_plmn_Hidden').val(data.code_PLMN);
                $('#mcode_plmn_disabled').val(data.code_PLMN);
                $('#mnom_op').val(data.nom_Op);
                $('#mMarketshare').val(data.marketshare || 0);
                $('#mOpPrefered').val(data.op_prefered || 'non');
                $('#mRNA').val(data.rna || 'non');
                $('#mRaTerminated').val(data.rA_Teminated || 'non');
                $('#mGrpName').val(data.code_Groupe);
                $('#mTypeOp').val(data.typeOperateurId);
                $('#mTypeAccord').val(data.typeAccordId);
            }

            function updateTable(data, tableId) {
                const tableBody = $(`#${tableId} tbody`);
                tableBody.empty();

                data.forEach(row => {
                    const newRow = $('<tr>');
                    newRow.append(
                        $('<td>').css({
                            'white-space': 'nowrap'
                        }).html(
                            `<a href="#" onclick="event.preventDefault(); setPlmnAndSearch('${row.plmn}');">${row.plmn}</a>`
                        )
                    );
                    newRow.append($('<td>').text(row.nomOperateur));
                    newRow.append($('<td>').text(row.nomPays));
                    tableBody.append(newRow);
                });
            }

            function populateFilters(data, filterContainerId,prefix) {
                data.forEach(item => {
                    const container = $('<div class="form-check" style="margin-bottom: 5px;">'); 
                    const checkbox = $('<input type="checkbox" class="form-check-input" id="' +prefix+ item.lookup_Type + '-' + item.id + '">');
                    const label = $('<label class="form-check-label" for="'+prefix + item.lookup_Type + '-' + item.id + '">');

                    label.text(item.value);
                    container.append(checkbox, label);
                    $(filterContainerId).append(container);
                });
            }

            function applyFilters() {
                const selectedDirectionIds = $('input[id^="Direction"]:checked').map(function () { return this.id.replace('Direction-', ''); }).get();
                const selectedServiceIds = $('input[id^="Nom_Service"]:checked').map(function () { return this.id.replace('Nom_Service-', ''); }).get();
                console.log(selectedServiceIds);

            }
            function getSelectedIds(type) {
                let selectedIds = [];
                $(`input[id^=${type}]:checked`).each(function () {
                    let id = this.id.split('-')[1];
                    selectedIds.push(parseInt(id));
                });
                return selectedIds;
            }

            // Gestion des événements
            $('a[data-bs-toggle="modal"]').on('click', function (event) {
                var codePlmn = $('#plmnSelect').val();
                if (!codePlmn || !$("#plmnOptions option").is((_, el) => el.value === codePlmn)) {
                    event.preventDefault();
                    $('#modifyOPModal').modal('hide');
                    return;
                }

                $('#modifyOPModal').modal('show');
                $('#mcode_plmn_disabled').text(codePlmn);

                $.get(`/Manage/getOperateur?Code_PLMN=${codePlmn}`, handleOperateurData);
            });

            $('#updateOperateurForm').on('submit', function (event) {
                event.preventDefault();
                $('#messageopIndex').empty();
                $.ajax({
                    url: '/Manage/UpdateOperateur',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if(response.success) {
                            $('#messageopIndex').removeClass().addClass('alert alert-success');
                            $('#messageopIndex').text(response.message);
                            $("#searchBtnPlmn").click();
                            setTimeout(function () {
                                $('#modifyOPModal').modal('hide');
                            }, 3000)
                        }
                        else {
                            $('#messageopIndex').removeClass().addClass('alert alert-danger');
                            $('#messageopIndex').text(response.message);
                        }
                    },
                    error: function () {
                        $('#messageopIndex').removeClass().addClass('alert alert-danger');
                        $('#messageopIndex').text("Erreur, veuillez vérifier que vous avez la permission et que les données sont bien remplies");


                    }
                });

            });



            $('#searchButtonGroupes').click(function () {
                const groupName = $('#Search-groupes').val();
                const encodedGroupName = encodeURIComponent(groupName);
                $.get(`/Manage/GetGroupes?NomGroupe=${encodedGroupName}`, function (data) {
                    updateTable(data, 'table_groupes_plmn');
                    console.log(data);
                });
            });

            $('#Search-groupes').keydown(function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    $('#searchButtonGroupes').click();
                }
            });
            $('#plmnByGroupe').on('show.bs.modal', function (event) {
                const groupName = $('#nomGroupe').text();
                let encodedNomGroupe = encodeURIComponent(groupName);

                const cachedGroupData = JSON.parse(localStorage.getItem("groupData"));
                const cachedGroupNames = cachedGroupData.map(g => g.nom_Groupe);

                if (!groupName || !cachedGroupNames.includes(groupName)) {
                    console.log("Le nom du groupe est invalide ou ne correspond pas à la liste des groupes en cache.");
                    event.preventDefault();
                    return;
                }

                $.get(`/Manage/GetGroupes?NomGroupe=${encodedNomGroupe}`, function (data) {
                    updateTable(data, 'table_groupeByPLmn');
                });
            });
            $('#plmnByGroupe').on('show.bs.modal', function (event) {
                const groupName = $('#nomGroupe').text();

                const cachedData = JSON.parse(localStorage.getItem("groupData"));
                const cachedGroupes = cachedData.map(g => g.nom_Groupe);

                if (!groupName || !cachedGroupes.includes(groupName)) {
                    console.log("Le nom du groupe est invalide ou ne correspond pas à la liste des groupes en cache.");
                    event.preventDefault();
                    return;
                }
                $.get(`/Manage/GetGroupes?NomGroupe=${groupName}`, function (data) {
                    updateTable(data, 'table_groupeByPLmn');
                });
            });
            $('#searchInput').on('keyup', function () {
                var value = $(this).val().toLowerCase();

                $("#table_groupeByPLmn tbody tr").each(function () {
                    var row = $(this);
                    var match = false;

                    row.find('td').each(function () {
                        var cell = $(this);
                        if (cell.text().toLowerCase().indexOf(value) > -1) {
                            match = true;
                            return false;
                        }
                    });

                    row.toggle(match);
                });
            });
            $(document).on('change', '.form-check-input[id^="Nom_Service"]', function () {
                const maxSelectableCheckboxes = 3;
                if ($('.form-check-input[id^="Nom_Service"]:checked').length > maxSelectableCheckboxes) {
                    this.checked = false;
                }
            });

            $('#applyFilters').click(function () {
                let serviceIds = getSelectedIds('Nom_Service');
                let directionIds = getSelectedIds('Direction');
                //console.log(serviceIds);
                //console.log(directionIds);

                let serviceIdsParam = serviceIds.join(',');
                let directionIdsParam = directionIds.join(',');
                console.log(serviceIdsParam);
                console.log(directionIdsParam);
                let params = [];
                if (serviceIds.length > 0) {
                    serviceIds.forEach(id => params.push({ name: 'serviceIds', value: id }));
                }
                if (directionIds.length > 0) {
                    directionIds.forEach(id => params.push({ name: 'directionIds', value: id }));
                }

                $.ajax({
                    url: '/api/filteredServices',
                    data: params,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        document.getElementById("GrpService1").innerHTML = "";
                        document.getElementById("GrpService2").innerHTML = "";
                        document.getElementById("GrpService3").innerHTML = "";
                        for (let i = 0; i < data.length && i < 3; i++) {
                            let item = data[i];
                            $(`#GrpService${i + 1}`).text(`${item.serviceName}: ${item.count}`);
                        }
                    },
                    error: function (error) {
                        console.log('Erreur lors de la récupération des données: ', error);
                    }
                });
            });
       
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            
            let tableMode = false;
            let originalParent = $("#card1").parent();
            let cards = $(".col-3");
            let card4 = $("#card4");
            let card5;
            let myLineChart;
            let myLineChart2;
            let apiResponse;
            var initialPieData;
            function createCharts() {
                setTimeout(function () {
                    var lookupData = JSON.parse(localStorage.getItem('lookupData'));
                    var serviceNames = lookupData.filter(item => item.lookup_Type === "Type_Incident").map(item => item.value);

                    var dataByContinent = apiResponse.reduce(function (map, item) {
                        if (!map[item.continent]) {
                            map[item.continent] = serviceNames.reduce(function (serviceMap, service) {
                                serviceMap[service] = 0;
                                return serviceMap;
                            }, {});
                        }

                        item.incidents.forEach(function (incident) {
                            map[item.continent][incident.typeIncident]++;
                        });
                        return map;
                    }, {});

                    var ctx = $("#chart-line")[0].getContext('2d');
                    var ctx2 = $("#chart-line2")[0].getContext('2d');

                    var radarData = {
                        labels: serviceNames,
                        datasets: Object.keys(dataByContinent).map(function (continent, index) {
                            var color = getRandomColor();
                            return {
                                label: continent,
                                data: serviceNames.map(function (serviceName) {
                                    return dataByContinent[continent][serviceName] || 0;
                                }),
                                backgroundColor: transparentize(color, '0.2'),
                                borderColor: color, 
                                pointBackgroundColor: color,
                                fill: true 
                            };
                        }),
                    };

                    var pieData = {
                        labels: serviceNames,
                        datasets: [{
                            label: 'Incident',
                            data: serviceNames.map(function (serviceName) {
                                var total = 0;
                                Object.keys(dataByContinent).forEach(function (continent) {
                                    total += dataByContinent[continent][serviceName] || 0;
                                });
                                return total;
                            }),
                            backgroundColor: serviceNames.map(function (serviceName) {
                                return getRandomColor();
                            }),
                            borderColor: 'rgba(0,0,0,0.1)'
                        }]
                    };
                    console.log(pieData);
                    myLineChart = new Chart(ctx, {
                        type: 'radar',
                        data: radarData,
                        options: {
                            responsive: true,
                            title: {
                                display: true,
                                text: 'Radar Incident'
                            }
                        }
                    });
                    myLineChart2=new Chart(ctx2, {
                        type: 'pie',
                        data: pieData,
                        options: {
                            responsive: true,
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Incident'
                            },
                            tooltips: {
                                callbacks: {
                                    label: function (tooltipItem, data) {
                                        var label = data.labels[tooltipItem.index] || '';
                                        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                                        return label + ": " + value;
                                    }
                                }
                            },
                            plugins: {
                                labels: {
                                    render: 'percentage',
                                    precision: 0,
                                    fontSize: 15,
                                    fontColor: '#fff',
                                    textShadow: true,
                                    shadowBlur: 10,
                                    shadowOffsetX: -5,
                                    shadowOffsetY: 5,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)' 
                                }
                            }
                        }
                    });
                    initialPieData = myLineChart2.data;
                }, 0);
            }
            $(document).on('click', '#dotIcon4, .dotIcon', function () {
                $('#plmnselectradar').val('');
                card4.hide();
                if (!tableMode) {
                    if (!apiResponse) {
                        $.get("/api/GetIncidentsByOp", function (response) {
                            console.log(response);
                            apiResponse = response;
                            createCharts();
                        });
                    } else {
                        createCharts();
                    }

                    let table = $("<table style='width:100%'></table>");
                    let cell1 = $("<td style='width:35%;'></td>").append($("#card1"));
                    let cell2 = $("<td style='width:35%;'></td>").append($("#card2"));
                    let cell3 = $("<td style='width:35%;'></td>").append($("#card3"));

                    if (!card5) {
                        card5 = $(
                            '<div id="card5" class="card">' +
                            '  <div class="card-body">' +
                            '   <div class="filter"><a class="icon dotIcon" href="#"><i class="bi bi-three-dots"></i></a></div>' +
                            '    <h5 class="card-title">Radar Incident</h5>' +
                            '    <div id="chartCarousel" class="carousel slide" data-bs-interval="false">' +
                            '       <div class="carousel-inner">' +
                       
                            '           <div class="carousel-item active">' +
                            '               <div class="chart-container">' +
                            '                   <canvas id="chart-line" class="chartjs-render-monitor"></canvas>' +
                            '               </div>' +
                            '           </div>' +
                            '           <div class="carousel-item">' +
                            '               <div class="input-group mb-3">' +
                            '                   <span class="input-group-text" id="basic-addon1">PLMN</span>' +
                            '                   <input type="text" class="form-control" id="plmnselectradar" list="plmnOptions" name="operatorInput" placeholder="Sélectionnez un opérateur" aria-label="Username" aria-describedby="basic-addon1">' +
                            '                    <datalist id="plmnOptions">' +
                            '                    </datalist>' +
                            '               </div>' +
                            '               <div class="chart-container">' +
                            '                   <canvas id="chart-line2" class="chartjs-render-monitor"></canvas>' +
                            '               </div>' +
                            '           </div>' +
                            '       </div>' +
                            '       <button class="carousel-control-prev" type="button" data-bs-target="#chartCarousel" data-bs-slide="prev">' +
                            '           <span class="btn carousel-control-prev-icon" aria-hidden="true"></span>' +
                            '           <span class="visually-hidden">Previous</span>' +
                            '       </button>' +
                            '       <button class="carousel-control-next" type="button" data-bs-target="#chartCarousel" data-bs-slide="next">' +
                            '           <span class="btn carousel-control-next-icon" aria-hidden="true"></span>' +
                            '           <span class="visually-hidden">Next</span>' +
                            '       </button>' +
                            '    </div>' +
                            '  </div>' +
                            '</div>'
                        );
                        originalParent.empty().append(card5);

                        let prevIcon = document.querySelector('.carousel-control-prev-icon');
                        let nextIcon = document.querySelector('.carousel-control-next-icon');

                        prevIcon.style.backgroundColor = '#4154f1';
                        nextIcon.style.backgroundColor = '#4154f1';
                    }

                    let cell4 = $("<td rowspan='3' style='width:65%;'></td>").append(card5);

                    let row1 = $("<tr></tr>").append(cell1, cell4);
                    let row2 = $("<tr></tr>").append(cell2);
                    let row3 = $("<tr></tr>").append(cell3);

                    table.append(row1, row2, row3);
                    originalParent.empty().append(table);

                    cards.removeClass("col-3").css({
                        width: '100%',
                        height: '100%'
                    });

                    card5.removeClass("col-3").css({
                        width: '100%',
                        height: '100%'
                    });

                    table.find('td:nth-child(1)').css('padding-right', '20px');
                    table.find('td:nth-child(1)').css('padding-left', '0.8rem');
                    table.find('td:nth-child(2)').css('padding-left', '10px');

                    card5.show();
                    loadPLMNCodes();

                    document.getElementById('plmnselectradar').addEventListener('input', function () {
                        var selectedOperator = this.value;

                        if (selectedOperator.length === 0) {
                            myLineChart2.data = initialPieData;
                            myLineChart2.update();
                        } else if (selectedOperator.length === 5) {
                            var operatorOption = Array.from(document.getElementById('plmnOptions').options).some(function (option) {
                                return option.value === selectedOperator;
                            });

                            if (operatorOption) {
                                fetch(`/api/incidents/${selectedOperator}`)
                                    .then(response => response.json())
                                    .then(data => {
                                        // Compter le nombre d'occurrences de chaque type d'incident
                                        var counts = data.reduce(function (map, incidentType) {
                                            map[incidentType] = (map[incidentType] || 0) + 1;
                                            return map;
                                        }, {});

                                        var labels = Object.keys(counts);
                                        var countsArray = Object.values(counts);

                                        var pieData = {
                                            labels: labels,
                                            datasets: [{
                                                data: countsArray,
                                                backgroundColor: labels.map(() => getRandomColor()),  // Génère une couleur aléatoire pour chaque label
                                                borderColor: 'rgba(0,0,0,0.1)'
                                            }]
                                        };

                                        if (myLineChart2) {
                                            myLineChart2.data = pieData;
                                            myLineChart2.update();
                                        } else {
                                            var ctx2 = document.getElementById('chart-line2').getContext('2d');
                                            myLineChart2 = new Chart(ctx2, {
                                                type: 'pie',
                                                data: pieData,
                                                options: {
                                                    // Vos options de graphique ici
                                                }
                                            });
                                        }
                                    })
                                    .catch(error => console.error('Erreur:', error));
                            } else {
                                // Afficher un message d'erreur si l'opérateur sélectionné ne correspond pas à une option
                                alert('L\'opérateur sélectionné ne correspond pas à une option.');
                            }
                        }
                    });

                } else {
                    originalParent.empty().append(cards);
                    cards.addClass("col-3").css({
                        width: '',
                        height: ''
                    });

                    card5.addClass("col-3").css({
                        width: '',
                        height: ''
                    });

                    card4.show();
                    card5.hide();
                    if (myLineChart) {
                        myLineChart.destroy();
                        myLineChart = null;
                    }

                    if (myLineChart2) {
                        myLineChart2.destroy();
                        myLineChart2 = null;
                    }
                }

                tableMode = !tableMode;
            });

        });

    </script>
}