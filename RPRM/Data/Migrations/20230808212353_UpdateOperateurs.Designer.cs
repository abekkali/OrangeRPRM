// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPRM.Data;

#nullable disable

namespace RPRM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230808212353_UpdateOperateurs")]
    partial class UpdateOperateurs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId1")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Contact", b =>
                {
                    b.Property<int>("Code_Contact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code_PLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Email")
                        .HasMaxLength(110)
                        .HasColumnType("varchar(110)");

                    b.Property<string>("Nom")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Role_id")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Code_Contact");

                    b.HasIndex("Code_PLMN");

                    b.HasIndex("Role_id");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.DocOperateur", b =>
                {
                    b.Property<int>("Code_DOC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code_PLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Type_Doc_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_d")
                        .HasColumnType("date");

                    b.Property<DateTime?>("date_f")
                        .HasColumnType("date");

                    b.HasKey("Code_DOC");

                    b.HasIndex("Code_PLMN");

                    b.HasIndex("Type_Doc_id");

                    b.ToTable("doc_operateur");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Groupe", b =>
                {
                    b.Property<int>("Code_Groupe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date_d")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date_f")
                        .HasColumnType("date");

                    b.Property<int?>("Eng_Val_In")
                        .HasColumnType("int");

                    b.Property<int?>("Eng_Val_out")
                        .HasColumnType("int");

                    b.Property<string>("Nom_Groupe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Code_Groupe");

                    b.ToTable("Groupe");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Incident", b =>
                {
                    b.Property<int>("Code_Incident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code_PLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Code_TT")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("longtext");

                    b.Property<int?>("Direction_id")
                        .HasColumnType("int");

                    b.Property<string>("IMSI")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MSISDN")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Type_Incident_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_d")
                        .HasColumnType("date");

                    b.Property<DateTime?>("date_f")
                        .HasColumnType("date");

                    b.HasKey("Code_Incident");

                    b.HasIndex("Code_PLMN");

                    b.HasIndex("Direction_id");

                    b.HasIndex("Type_Incident_id");

                    b.ToTable("incident");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.LookupTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Lookup_Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Lookup_Type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("lookUp_table");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.NetworkInfo", b =>
                {
                    b.Property<int>("CodeInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code_Info");

                    b.Property<string>("CodePLMN")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Code_PLMN");

                    b.Property<int?>("TypeInfoId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Type_Info_id");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Valeur");

                    b.HasKey("CodeInfo");

                    b.HasIndex("CodePLMN");

                    b.HasIndex("TypeInfoId");

                    b.ToTable("network_info");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Operateurs", b =>
                {
                    b.Property<string>("Code_PLMN")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Code_Groupe")
                        .HasColumnType("int");

                    b.Property<string>("Code_pays")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("MCC")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("MNC")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("Marketshare")
                        .HasColumnType("int");

                    b.Property<string>("Nom_Op")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Op_prefered")
                        .HasColumnType("enum('oui', 'non')");

                    b.Property<string>("RA_Teminated")
                        .HasColumnType("enum('oui', 'non')");

                    b.Property<string>("RNA")
                        .HasColumnType("enum('oui', 'non')");

                    b.Property<int>("TypeAccordId")
                        .HasColumnType("int")
                        .HasColumnName("type_accord_id");

                    b.Property<int>("TypeOperateurId")
                        .HasColumnType("int")
                        .HasColumnName("Type_operateur_id");

                    b.HasKey("Code_PLMN");

                    b.HasIndex("Code_Groupe");

                    b.HasIndex("Code_pays");

                    b.HasIndex("TypeAccordId");

                    b.HasIndex("TypeOperateurId");

                    b.ToTable("operateurs");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Pays", b =>
                {
                    b.Property<string>("Code_pays")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CC")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MCC")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Nom_pays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nom_pays_anglais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("enum('oui','non')");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Code_pays");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.ServiceOuvert", b =>
                {
                    b.Property<int>("Code_Service")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code_PLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Destination")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Direction_id")
                        .HasColumnType("int");

                    b.Property<int>("Nom_Service_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_d")
                        .HasColumnType("date");

                    b.Property<DateTime?>("date_f")
                        .HasColumnType("date");

                    b.HasKey("Code_Service");

                    b.HasIndex("Code_PLMN");

                    b.HasIndex("Direction_id");

                    b.HasIndex("Nom_Service_id");

                    b.ToTable("services_ouverts");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.SimReceived", b =>
                {
                    b.Property<int>("CodeSim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code_SIM");

                    b.Property<string>("CodePLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Code_PLMN");

                    b.Property<string>("Code_PLMN")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_d");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_f");

                    b.Property<string>("IMSI")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("IMSI");

                    b.Property<string>("MSISDN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MSISDN");

                    b.HasKey("CodeSim");

                    b.HasIndex("Code_PLMN");

                    b.ToTable("sim_received", t =>
                        {
                            t.Property("Code_PLMN")
                                .HasColumnName("Code_PLMN1");
                        });
                });

            modelBuilder.Entity("RPRM.Models.Metiers.SimSent", b =>
                {
                    b.Property<int>("CodeSim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code_SIM");

                    b.Property<string>("CodePLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Code_PLMN");

                    b.Property<string>("Code_PLMN")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_d");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_f");

                    b.Property<string>("IMSI")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("IMSI");

                    b.Property<string>("MSISDN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MSISDN");

                    b.HasKey("CodeSim");

                    b.HasIndex("Code_PLMN");

                    b.ToTable("sim_sent", t =>
                        {
                            t.Property("Code_PLMN")
                                .HasColumnName("Code_PLMN1");
                        });
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Tarif", b =>
                {
                    b.Property<int>("Code_Tarif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Auto_Renwal")
                        .HasColumnType("enum");

                    b.Property<string>("Code_PLMN")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Date_d")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date_f")
                        .HasColumnType("date");

                    b.Property<string>("Devis")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Direction_id")
                        .HasColumnType("int");

                    b.Property<string>("Document_DCH")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Exchange_rate")
                        .HasColumnType("double");

                    b.Property<int>("Increment_id")
                        .HasColumnType("int");

                    b.Property<double?>("Rate")
                        .HasColumnType("double");

                    b.Property<int>("Type_Tarif_id")
                        .HasColumnType("int");

                    b.Property<int>("Type_Trafic_id")
                        .HasColumnType("int");

                    b.HasKey("Code_Tarif");

                    b.HasIndex("Code_PLMN");

                    b.HasIndex("Direction_id");

                    b.HasIndex("Increment_id");

                    b.HasIndex("Type_Tarif_id");

                    b.HasIndex("Type_Trafic_id");

                    b.ToTable("tarifs");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.TestUnit", b =>
                {
                    b.Property<int>("CodeTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code_test");

                    b.Property<string>("Afrique")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Afrique");

                    b.Property<string>("CommentaireLong")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Commentaire_long");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_d");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_fin");

                    b.Property<int?>("DirectionId")
                        .HasColumnType("int")
                        .HasColumnName("Direction_id");

                    b.Property<int>("Direction_id")
                        .HasColumnType("int");

                    b.Property<string>("Engagement")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Engagement");

                    b.Property<int?>("EtatTestId")
                        .HasColumnType("int")
                        .HasColumnName("Etat_Test_id");

                    b.Property<int>("Etat_Test_id")
                        .HasColumnType("int");

                    b.Property<string>("GroupePrivilegie")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Groupe_Privilégié");

                    b.Property<string>("NewDest")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("New_Dest");

                    b.Property<int?>("NomServiceId")
                        .HasColumnType("int")
                        .HasColumnName("Nom_Service_id");

                    b.Property<int>("Nom_Service_id")
                        .HasColumnType("int");

                    b.Property<string>("Privilegie")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Privilégié");

                    b.Property<int?>("TestOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("Test_Owner_id");

                    b.Property<int?>("Test_Owner_id")
                        .HasColumnType("int");

                    b.HasKey("CodeTest");

                    b.HasIndex("Direction_id");

                    b.HasIndex("Etat_Test_id");

                    b.HasIndex("Nom_Service_id");

                    b.HasIndex("Test_Owner_id");

                    b.ToTable("test_unit", t =>
                        {
                            t.Property("Direction_id")
                                .HasColumnName("Direction_id1");

                            t.Property("Etat_Test_id")
                                .HasColumnName("Etat_Test_id1");

                            t.Property("Nom_Service_id")
                                .HasColumnName("Nom_Service_id1");

                            t.Property("Test_Owner_id")
                                .HasColumnName("Test_Owner_id1");
                        });
                });

            modelBuilder.Entity("RPRM.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RPRM.Models.User.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("asptnetUserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RPRM.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.User.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RPRM.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RPRM.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Contact", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "RoleLookup")
                        .WithMany()
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operateur");

                    b.Navigation("RoleLookup");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.DocOperateur", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeDocLookup")
                        .WithMany()
                        .HasForeignKey("Type_Doc_id");

                    b.Navigation("Operateur");

                    b.Navigation("TypeDocLookup");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Incident", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "DirectionLookup")
                        .WithMany()
                        .HasForeignKey("Direction_id");

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeIncidentLookup")
                        .WithMany()
                        .HasForeignKey("Type_Incident_id");

                    b.Navigation("DirectionLookup");

                    b.Navigation("Operateur");

                    b.Navigation("TypeIncidentLookup");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.NetworkInfo", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("CodePLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeInfo")
                        .WithMany()
                        .HasForeignKey("TypeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operateur");

                    b.Navigation("TypeInfo");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Operateurs", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Groupe", "Groupe")
                        .WithMany()
                        .HasForeignKey("Code_Groupe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("Code_pays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeAccord")
                        .WithMany()
                        .HasForeignKey("TypeAccordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeOperateur")
                        .WithMany()
                        .HasForeignKey("TypeOperateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");

                    b.Navigation("Pays");

                    b.Navigation("TypeAccord");

                    b.Navigation("TypeOperateur");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.ServiceOuvert", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "DirectionLookup")
                        .WithMany()
                        .HasForeignKey("Direction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "NomServiceLookup")
                        .WithMany()
                        .HasForeignKey("Nom_Service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionLookup");

                    b.Navigation("NomServiceLookup");

                    b.Navigation("Operateur");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.SimReceived", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN");

                    b.Navigation("Operateur");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.SimSent", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN");

                    b.Navigation("Operateur");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.Tarif", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.Operateurs", "Operateur")
                        .WithMany()
                        .HasForeignKey("Code_PLMN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "DirectionLookup")
                        .WithMany()
                        .HasForeignKey("Direction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "IncrementLookup")
                        .WithMany()
                        .HasForeignKey("Increment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeTarifLookup")
                        .WithMany()
                        .HasForeignKey("Type_Tarif_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TypeTraficLookup")
                        .WithMany()
                        .HasForeignKey("Type_Trafic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionLookup");

                    b.Navigation("IncrementLookup");

                    b.Navigation("Operateur");

                    b.Navigation("TypeTarifLookup");

                    b.Navigation("TypeTraficLookup");
                });

            modelBuilder.Entity("RPRM.Models.Metiers.TestUnit", b =>
                {
                    b.HasOne("RPRM.Models.Metiers.LookupTable", "Direction")
                        .WithMany()
                        .HasForeignKey("Direction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "EtatTest")
                        .WithMany()
                        .HasForeignKey("Etat_Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "NomService")
                        .WithMany()
                        .HasForeignKey("Nom_Service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPRM.Models.Metiers.LookupTable", "TestOwner")
                        .WithMany()
                        .HasForeignKey("Test_Owner_id");

                    b.Navigation("Direction");

                    b.Navigation("EtatTest");

                    b.Navigation("NomService");

                    b.Navigation("TestOwner");
                });

            modelBuilder.Entity("RPRM.Models.User.UserPermission", b =>
                {
                    b.HasOne("RPRM.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPRM.Models.User.User", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
